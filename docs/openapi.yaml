openapi: 3.0.3
servers:
    - url : 'http://{serv}/api/v1'
      variables:
        serv:
          default: localhost

security : []
info:
  title: Users API - OpenAPI
  description: |
               API for adding, selecting, editing and deleting users
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

tags:
  - name: user
    description: Методы для работы с пользователями
  - name: message

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      x-ogen-operation-group: user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/default'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      x-ogen-operation-group: user
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/default'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      x-ogen-operation-group: user
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        default:
          $ref: '#/components/responses/default'
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      x-ogen-operation-group: user
      operationId: logoutUser
      parameters: []
      responses:
        200:
          description: successful operation
        default:
          $ref: '#/components/responses/default'
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      x-ogen-operation-group: user
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      x-ogen-operation-group: user
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      x-ogen-operation-group: user
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request completed
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/default'
components:
  schemas:
    UnsuccessfulResponse:
      type: object
      required: [ msg ]
      properties:
        msg:
          type: string
    CreateUserRequest:
      required: [nickname, name, surname, hashedPass]
      type: object
      properties:
        nickname:
          type: string
        name:
          type: string
        surname:
          type: string
        hashedPass:
          type: string

    User:
      type: object
      required: [id, nickname, name, surname, userStatus, date]
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        name:
          type: string
        surname:
          type: string
        hashedPass:
          type: string
        userStatus:
          type: string
        date:
          type: string
          format: date
      xml:
        name: user

  responses:
    '400':
      description: 'Ошибка валидации/чтения запроса'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          examples:
            bind:
              summary: Bind Example
              value: { "msg": "bind" }
            validate:
              summary: Validate Example
              value: { "msg": "validate" }

    '401':
      description: 'Ошибка авторизации'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          example: { "msg": "unauthorized" }

    '402':
      description: 'Превышен лимит создания источников'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          example: { "msg": "limit exceeded" }

    '403':
      description: 'Ошибка проверки прав доступа'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          example: { "msg": "access forbidden" }

    '404':
      description: 'Объект не найден'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          example: { "msg": "not found" }

    '423':
      description: 'Данная операция не доступна для указанного ресурса'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          example: { "msg": "resource locked" }

    default:
      description: 'Внутренняя ошибка сервиса'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsuccessfulResponse'
          example: { "msg": "internal" }
