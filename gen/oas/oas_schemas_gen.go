// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"io"
	"time"
)

func (s *DefaultStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/CreateUserRequest
type CreateUserRequest struct {
	Nickname   string `json:"nickname"`
	Name       string `json:"name"`
	Surname    string `json:"surname"`
	HashedPass string `json:"hashedPass"`
}

// GetNickname returns the value of Nickname.
func (s *CreateUserRequest) GetNickname() string {
	return s.Nickname
}

// GetName returns the value of Name.
func (s *CreateUserRequest) GetName() string {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *CreateUserRequest) GetSurname() string {
	return s.Surname
}

// GetHashedPass returns the value of HashedPass.
func (s *CreateUserRequest) GetHashedPass() string {
	return s.HashedPass
}

// SetNickname sets the value of Nickname.
func (s *CreateUserRequest) SetNickname(val string) {
	s.Nickname = val
}

// SetName sets the value of Name.
func (s *CreateUserRequest) SetName(val string) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *CreateUserRequest) SetSurname(val string) {
	s.Surname = val
}

// SetHashedPass sets the value of HashedPass.
func (s *CreateUserRequest) SetHashedPass(val string) {
	s.HashedPass = val
}

// DefaultStatusCode wraps UnsuccessfulResponse with StatusCode.
type DefaultStatusCode struct {
	StatusCode int
	Response   UnsuccessfulResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *DefaultStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *DefaultStatusCode) GetResponse() UnsuccessfulResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *DefaultStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *DefaultStatusCode) SetResponse(val UnsuccessfulResponse) {
	s.Response = val
}

// DeleteUserBadRequest is response for DeleteUser operation.
type DeleteUserBadRequest struct{}

func (*DeleteUserBadRequest) deleteUserRes() {}

// DeleteUserNotFound is response for DeleteUser operation.
type DeleteUserNotFound struct{}

func (*DeleteUserNotFound) deleteUserRes() {}

// DeleteUserOK is response for DeleteUser operation.
type DeleteUserOK struct{}

func (*DeleteUserOK) deleteUserRes() {}

// GetUserByNameBadRequest is response for GetUserByName operation.
type GetUserByNameBadRequest struct{}

func (*GetUserByNameBadRequest) getUserByNameRes() {}

// GetUserByNameNotFound is response for GetUserByName operation.
type GetUserByNameNotFound struct{}

func (*GetUserByNameNotFound) getUserByNameRes() {}

// LoginUserBadRequest is response for LoginUser operation.
type LoginUserBadRequest struct{}

func (*LoginUserBadRequest) loginUserRes() {}

type LoginUserOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoginUserOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// LoginUserOKApplicationXMLHeaders wraps LoginUserOKApplicationXML with response headers.
type LoginUserOKApplicationXMLHeaders struct {
	XExpiresAfter OptDateTime
	XRateLimit    OptInt32
	Response      LoginUserOKApplicationXML
}

// GetXExpiresAfter returns the value of XExpiresAfter.
func (s *LoginUserOKApplicationXMLHeaders) GetXExpiresAfter() OptDateTime {
	return s.XExpiresAfter
}

// GetXRateLimit returns the value of XRateLimit.
func (s *LoginUserOKApplicationXMLHeaders) GetXRateLimit() OptInt32 {
	return s.XRateLimit
}

// GetResponse returns the value of Response.
func (s *LoginUserOKApplicationXMLHeaders) GetResponse() LoginUserOKApplicationXML {
	return s.Response
}

// SetXExpiresAfter sets the value of XExpiresAfter.
func (s *LoginUserOKApplicationXMLHeaders) SetXExpiresAfter(val OptDateTime) {
	s.XExpiresAfter = val
}

// SetXRateLimit sets the value of XRateLimit.
func (s *LoginUserOKApplicationXMLHeaders) SetXRateLimit(val OptInt32) {
	s.XRateLimit = val
}

// SetResponse sets the value of Response.
func (s *LoginUserOKApplicationXMLHeaders) SetResponse(val LoginUserOKApplicationXML) {
	s.Response = val
}

func (*LoginUserOKApplicationXMLHeaders) loginUserRes() {}

// LoginUserOKHeaders wraps string with response headers.
type LoginUserOKHeaders struct {
	XExpiresAfter OptDateTime
	XRateLimit    OptInt32
	Response      string
}

// GetXExpiresAfter returns the value of XExpiresAfter.
func (s *LoginUserOKHeaders) GetXExpiresAfter() OptDateTime {
	return s.XExpiresAfter
}

// GetXRateLimit returns the value of XRateLimit.
func (s *LoginUserOKHeaders) GetXRateLimit() OptInt32 {
	return s.XRateLimit
}

// GetResponse returns the value of Response.
func (s *LoginUserOKHeaders) GetResponse() string {
	return s.Response
}

// SetXExpiresAfter sets the value of XExpiresAfter.
func (s *LoginUserOKHeaders) SetXExpiresAfter(val OptDateTime) {
	s.XExpiresAfter = val
}

// SetXRateLimit sets the value of XRateLimit.
func (s *LoginUserOKHeaders) SetXRateLimit(val OptInt32) {
	s.XRateLimit = val
}

// SetResponse sets the value of Response.
func (s *LoginUserOKHeaders) SetResponse(val string) {
	s.Response = val
}

func (*LoginUserOKHeaders) loginUserRes() {}

// LogoutUserOK is response for LogoutUser operation.
type LogoutUserOK struct{}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/UnsuccessfulResponse
type UnsuccessfulResponse struct {
	Msg string `json:"msg"`
}

// GetMsg returns the value of Msg.
func (s *UnsuccessfulResponse) GetMsg() string {
	return s.Msg
}

// SetMsg sets the value of Msg.
func (s *UnsuccessfulResponse) SetMsg(val string) {
	s.Msg = val
}

type UpdateUserApplicationJSON User

func (*UpdateUserApplicationJSON) updateUserReq() {}

type UpdateUserApplicationXWwwFormUrlencoded User

func (*UpdateUserApplicationXWwwFormUrlencoded) updateUserReq() {}

// UpdateUserOK is response for UpdateUser operation.
type UpdateUserOK struct{}

type UpdateUserReqEmptyBody struct{}

func (*UpdateUserReqEmptyBody) updateUserReq() {}

// Ref: #/components/schemas/User
type User struct {
	ID         int64     `json:"id"`
	Nickname   string    `json:"nickname"`
	Name       string    `json:"name"`
	Surname    string    `json:"surname"`
	HashedPass OptString `json:"hashedPass"`
	UserStatus string    `json:"userStatus"`
	Date       time.Time `json:"date"`
}

// GetID returns the value of ID.
func (s *User) GetID() int64 {
	return s.ID
}

// GetNickname returns the value of Nickname.
func (s *User) GetNickname() string {
	return s.Nickname
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *User) GetSurname() string {
	return s.Surname
}

// GetHashedPass returns the value of HashedPass.
func (s *User) GetHashedPass() OptString {
	return s.HashedPass
}

// GetUserStatus returns the value of UserStatus.
func (s *User) GetUserStatus() string {
	return s.UserStatus
}

// GetDate returns the value of Date.
func (s *User) GetDate() time.Time {
	return s.Date
}

// SetID sets the value of ID.
func (s *User) SetID(val int64) {
	s.ID = val
}

// SetNickname sets the value of Nickname.
func (s *User) SetNickname(val string) {
	s.Nickname = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *User) SetSurname(val string) {
	s.Surname = val
}

// SetHashedPass sets the value of HashedPass.
func (s *User) SetHashedPass(val OptString) {
	s.HashedPass = val
}

// SetUserStatus sets the value of UserStatus.
func (s *User) SetUserStatus(val string) {
	s.UserStatus = val
}

// SetDate sets the value of Date.
func (s *User) SetDate(val time.Time) {
	s.Date = val
}

func (*User) getUserByNameRes() {}
