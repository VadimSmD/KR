// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	UserHandler
	// NewError creates *DefaultStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *DefaultStatusCode
}

// UserHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: User
type UserHandler interface {
	// CreateUser implements createUser operation.
	//
	// This can only be done by the logged in user.
	//
	// POST /user
	CreateUser(ctx context.Context, req *CreateUserRequest) (*User, error)
	// CreateUsersWithListInput implements createUsersWithListInput operation.
	//
	// Creates list of users with given input array.
	//
	// POST /user/createWithList
	CreateUsersWithListInput(ctx context.Context, req []User) (*User, error)
	// DeleteUser implements deleteUser operation.
	//
	// This can only be done by the logged in user.
	//
	// DELETE /user/{username}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// GetUserByName implements getUserByName operation.
	//
	// Get user by user name.
	//
	// GET /user/{username}
	GetUserByName(ctx context.Context, params GetUserByNameParams) (GetUserByNameRes, error)
	// LoginUser implements loginUser operation.
	//
	// Logs user into the system.
	//
	// GET /user/login
	LoginUser(ctx context.Context, params LoginUserParams) (LoginUserRes, error)
	// LogoutUser implements logoutUser operation.
	//
	// Logs out current logged in user session.
	//
	// GET /user/logout
	LogoutUser(ctx context.Context) error
	// UpdateUser implements updateUser operation.
	//
	// This can only be done by the logged in user.
	//
	// PUT /user/{username}
	UpdateUser(ctx context.Context, req UpdateUserReq, params UpdateUserParams) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
